<?php

namespace Tests\Feature\Aircraft;

use App\Models\Aircraft;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class RentAircraftTest extends TestCase
{
    use RefreshDatabase;
    protected Model $user;
    protected Model $aircraft;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        $this->aircraft = Aircraft::factory()->create();
    }

    /**
     * A basic feature test example.
     */
    public function test_successful_response(): void
    {
        $data = ['aircraft_id' => $this->aircraft->id, 'user_id' => $this->user->id];
        $response = $this->postJson('/api/aircraft/rent', $data);

        $response->assertStatus(200);
        $response->assertJson(['message' => 'Success']);
    }

    public function test_aircraft_is_reserved(): void
    {
        $data = ['aircraft_id' => $this->aircraft->id, 'user_id' => $this->user->id];
        $this->postJson('/api/aircraft/rent', $data);

        $this->aircraft->refresh();
        $this->assertEquals($this->user->id, $this->aircraft->user_id);
    }

    public function test_aircraft_reservation_is_cancelled(): void
    {
        $aircraft = Aircraft::factory()->create([
            'registration' => 'G-TEST',
            'user_id' => $this->user->id
        ]);
        $data = ['aircraft_id' => $aircraft->id, 'user_id' => $this->user->id];
        $this->postJson('/api/aircraft/rent', $data);

        $aircraft->refresh();
        $this->assertNull($this->aircraft->user_id);
    }
}
