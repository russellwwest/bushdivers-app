<?php

namespace Tests\Feature\Crew;

use App\Enums\UserTransactionTypes;
use App\Models\Airport;
use App\Models\User;
use App\Models\UserAccountLedger;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Inertia\Testing\Assert;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class JumpseatTest extends TestCase
{
    use RefreshDatabase;
    protected Model $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'cash' => 200.00
        ]);
        UserAccountLedger::factory()-> create([
            'user_id' => $this->user->id,
            'transaction_type' => UserTransactionTypes::Jumpseat,
            'total' => -560.00
        ]);
    }

    /**
     * A basic feature test example.
     */
    public function test_jumpseat_page_responds(): void
    {
        $response = $this->actingAs($this->user)->get('/jumpseat');
        $response->assertStatus(Response::HTTP_OK);
    }

    public function test_jumpseat_returns_users_past_transaction_total(): void
    {
        $response = $this->actingAs($this->user)->get('/jumpseat');
        $response->assertSee(['spent' => 560.00]);
    }

    public function test_jumpseat_check_returns_distance_and_cost(): void
    {
        $startAirport = Airport::factory()->create();
        $endAirport = Airport::factory()->create([
            'identifier' => 'AYMN',
            'lat' => -6.14617,
            'lon' => 143.65733
        ]);
        $response = $this->getJson('/api/jumpseat/check/'.$startAirport->identifier.'/'.$endAirport->identifier);
        $response->assertStatus(200);
        $response->assertJson(['distance' => 28.57, 'cost' => 11.43]);
    }

    public function test_jumpseat_returns_not_found_for_no_airport(): void
    {
        $startAirport = Airport::factory()->create();
        $response = $this->getJson('/api/jumpseat/check/'.$startAirport->identifier.'/XXXA');
        $response->assertStatus(404);
        $response->assertJson(['message' => 'Airport not found']);
    }

    public function test_jumpseat_process_updates_location(): void
    {
        $response = $this->followingRedirects()->actingAs($this->user)->post('/jumpseat', ['destination' => 'AYMN', 'cost' => 28.47]);
        $response->assertStatus(200);
        $this->user->refresh();
        $this->assertEquals('AYMN', $this->user->current_airport_id);
    }

    public function test_jumpseat_process_adds_transaction(): void
    {
        $response = $this->actingAs($this->user)->post('/jumpseat', ['destination' => 'AYMN', 'cost' => 28.47]);
        $this->assertDatabaseHas('user_account_ledgers', [
            'user_id' => $this->user->id,
            'total' => -28.47
        ]);
    }

    public function test_jumpseat_process_fails_with_insufficient_funds(): void
    {
        $response = $this->followingRedirects()->actingAs($this->user)->post('/jumpseat', ['destination' => 'AYMN', 'cost' => 500.00]);
        $response->assertSee('Insufficient funds');
    }
}
