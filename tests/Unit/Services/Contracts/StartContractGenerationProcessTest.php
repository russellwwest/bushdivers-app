<?php

namespace Tests\Unit\Services\Contracts;

use App\Models\Airport;
use App\Models\CargoTypes;
use App\Services\Contracts\StartContractGenerationProcess;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class StartContractGenerationProcessTest extends TestCase
{
    use RefreshDatabase;
    protected Model $aymr;
    protected Model $aymn;
    protected Model $aymh;
    protected Model $egbs;
    protected Model $egbj;
    protected Model $ayfo;
    protected StartContractGenerationProcess $startContractGenerationProcess;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->startContractGenerationProcess = app()->make(StartContractGenerationProcess::class);
        $this->aymr = Airport::factory()->create();
        $this->aymh = Airport::factory()->create([
            'identifier' => 'AYMH',
            'name' => 'Mount Hagen',
            'lat' => -5.82781,
            'lon' => 144.29953,
            'magnetic_variance' => 5.51567
        ]);
        $this->aymn = Airport::factory()->create([
            'identifier' => 'AYMN',
            'name' => 'Mendi',
            'lat' => -6.14617,
            'lon' => 143.65733,
            'magnetic_variance' => 5.34502
        ]);
        $this->egbs = Airport::factory()->create([
            'identifier' => 'EGBS',
            'name' => 'Shobdon',
            'lat' => 52.24166,
            'lon' => -2.88111,
            'magnetic_variance' => -2.72951
        ]);
        $this->egbj = Airport::factory()->create([
            'identifier' => 'EGBJ',
            'name' => 'Gloucester',
            'lat' => 51.89417,
            'lon' => -2.16722,
            'magnetic_variance' => -2.64494
        ]);
        $this->ayfo = Airport::factory()->create([
            'identifier' => 'AYFO',
            'name' => 'Fogomaiu Airstrip',
            'lat' => -6.50917,
            'lon' => 143.07904,
            'magnetic_variance' => 5.37523
        ]);
        CargoTypes::factory()->create([
            'cargo_type' => 1,
            'cargo_type_text' => 'Food stuffs'
        ]);
        CargoTypes::factory()->create([
            'cargo_type' => 1,
            'cargo_type_text' => 'Clothing'
        ]);
        CargoTypes::factory()->create([
            'cargo_type' => 2,
            'cargo_type_text' => 'Tourists'
        ]);
        CargoTypes::factory()->create([
            'cargo_type' => 2,
            'cargo_type_text' => 'Journalists'
        ]);
    }

    /**
     * A basic unit test example.
     */
    public function test_contracts_returned_as_array(): void
    {
        $allAirports = collect([$this->aymr, $this->aymh, $this->aymn]);
        $contracts = $this->startContractGenerationProcess->execute($this->ayfo, $allAirports, 10);
        $this->assertIsArray($contracts);
    }

    public function test_number_contracts_returned_when_less_airports_than_num_to_generate(): void
    {
        $allAirports = collect([$this->aymr, $this->aymh, $this->aymn]);
        $contracts = $this->startContractGenerationProcess->execute($this->ayfo, $allAirports, 10);
        $this->assertCount(5, $contracts);
    }

    public function test_number_contracts_returned_when_more_airports_than_num_to_generate(): void
    {
        $allAirports = collect([$this->aymr, $this->aymh, $this->aymn]);
        $contracts = $this->startContractGenerationProcess->execute($this->ayfo, $allAirports, 2);
        $this->assertCount(2, $contracts);
    }

    public function test_number_contracts_returned_when_one_airport_available(): void
    {
        $allAirports = collect([$this->egbj]);
        $contracts = $this->startContractGenerationProcess->execute($this->egbs, $allAirports, 10);
        $this->assertCount(4, $contracts);
    }
}
